import logging

from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort, redirect_to

from darcscgi.lib.base import BaseController, render

from pylons import app_globals
from darcscgi.lib.helpers import filelisting, safefile, decodeMessage, apply_patch, quarantine_prune, quarantine
import paste.fileapp
import os, pyme.core
from pyme.constants import protocol

log = logging.getLogger(__name__)

class RepositoriesController(BaseController):

    def post(self,repository):
        #request.content_type = "application/octet-stream"
        import urllib
        #raise Exception()
        return "Request.body " + str(request.body) + "  " + str(len(request.body)) + "\n\nRequest.POST " + str(request.POST) + "  " + str(len(request.POST)) + "\n\n" + str(sorted(request.headers.items())) + "\n\nContent-length:  " + request.environ.get('CONTENT_LENGTH',"No Length") + "\n\nContent:  " + urllib.unquote_plus(request.environ['wsgi.input'].read()) + "\n\n"
        #return str(sorted(request.headers.items())) + "\n\nContent-length:  " + request.environ.get('CONTENT_LENGTH',"No Length") + "\n\nContent:  " + request.environ['wsgi.input'].read() + "\n\n"
#        if app_globals.is_repository(repository):
#            repository_path = app_globals.repositories[repository]['location']
#            if app_globals.repositories[repository]['allow-write']:
#                length = int(request.environ.get('CONTENT_LENGTH',0))
#                if length > (app_globals.repositories[repository]['patch-max-size'] * 1024 * 1024):
#                    abort(413)
#                elif length <= 0:
#                    abort(406)
#                else:
#                    message = request.environ['wsgi.input'].read(length)
#                    patch = decodeMessage(message)
#
#                    globals = app_globals._current_obj()
#                    def generator():
#                        if globals.repositories[repository]['verify-write'] == False:
#                            command = [globals.globalSettings['darcs']]
#                            command_options = globals.globalSettings['darcs-options']
#                            for output in apply_patch(repository,repository_path,patch,command,command_options):
#                                yield output
#                        # ['verify-write'] == True
#                        else:
#                            quarantine_path = globals.globalSettings['quarantine-location']
#                            max_patches = globals.repositories[repository]['quarantine-max-patches']
#                            max_size = globals.repositories[repository]['quarantine-max-size'] * 1024 * 1024
#
#                            keyring_dirpath = globals.globalSettings['keyring-location']
#                            keyring_basepath = globals.repositories[repository]['verify-write'].lstrip('/\\')
#                            keyring_homedir = os.path.join(keyring_dirpath, keyring_basepath).encode('utf-8')
#                            if not os.path.exists(keyring_homedir):
#                                os.makedirs(keyring_homedir)
#
#                            for engine in pyme.core.get_engine_info():
#                                if engine.protocol == 0:
#                                    gpg_executable = engine.file_name
#                            context = pyme.core.Context()
#                            context.set_engine_info(protocol.OpenPGP, gpg_executable, keyring_homedir)
#                            signature = pyme.core.Data(string=patch)
#                            plain = pyme.core.Data()
#                            try:
#                                context.op_verify(signature,None,plain)
#                            except pyme.errors.GPGMEError:
#                                yield "Patch is not signed, or improperly signed\n"
#                                return_message = quarantine_prune(repository,quarantine_path,max_patches,max_size,length)
#                                if return_message is not None:
#                                    yield return_message
#                                else:
#                                    for output in quarantine(repository,quarantine_path,patch):
#                                        yield output
#                            else:
#                                result = context.op_verify_result()
#                                verified = False
#                                for sign in result.signatures:
#                                    if sign.status == 0:
#                                        verified = True
#                                if verified:
#                                    command = [globals.globalSettings['darcs']]
#                                    command_options = globals.globalSettings['darcs-options']
#                                    for output in apply_patch(repository,repository_path,patch,command,command_options):
#                                        yield output
#                                else:
#                                    yield "Signature did not match any keys\n"
#                                    return_message = quarantine_prune(repository,quarantine_path,max_patches,max_size,length)
#                                    if return_message is not None:
#                                        yield return_message
#                                    else:
#                                        for output in quarantine(repository,quarantine_path,patch):
#                                            yield output
#                    # End generator object
#                    return generator()
#            else:
#                abort(403)
#        else:
#            abort(404)

    def fetch(self,repository,path):
        if app_globals.is_repository(repository):
            location = app_globals.repositories[repository]['location']
            if app_globals.repositories[repository]['allow-read']:
                if app_globals.repositories[repository]['verify-read'] == False:
                    result = safefile(location,path)
                    if result:
                        fapp = paste.fileapp.FileApp(result, allowed_methods=('GET','HEAD','POST'))
                        return fapp(request.environ, self.start_response)
                    # means either it is not a file, is a symlink, or not a subdirectory of the repository
                    # return 403 in all cases to avoid dictionary attacks to determine file names
                    else:
                        abort(403)
                else:
                    authentication = request.params.get('sig')
                    if authentication:
                        keyring_dirpath = app_globals.globalSettings['keyring-location']
                        keyring_basepath = app_globals.repositories[repository]['verify-read'].lstrip('/\\')
                        keyring_homedir = os.path.join(keyring_dirpath, keyring_basepath).encode('utf-8')
                        if not os.path.exists(keyring_homedir):
                            os.mkdir(keyring_homedir)

                        for engine in pyme.core.get_engine_info():
                            if engine.protocol == 0:
                                gpg_executable = engine.file_name
                        context = pyme.core.Context()
                        context.set_engine_info(protocol.OpenPGP, gpg_executable, keyring_homedir)
                        signature = pyme.core.Data(string=authentication.encode('utf-8'))
                        plain = pyme.core.Data()
                        try:
                            context.op_verify(signature,None,plain)
                        except pyme.errors.GPGMEError:
                            #return "Request is improperly signed\n"
                            abort(406)
                        else:
                            result = context.op_verify_result()
                            verified = False
                            for sign in result.signatures:
                                if sign.status == 0:
                                    verified = True
                            if verified:
                                plain.seek(0,0)
                                verified_message = plain.read()
                                if verified_message == "welcome\n":
                                    result = safefile(location,path)
                                    if result:
                                        fapp = paste.fileapp.FileApp(result, allowed_methods=('GET', 'HEAD', 'POST'))
                                        return fapp(request.environ, self.start_response)
                                    # means either it is not a file, is a symlink, or not a subdirectory of the repository
                                    # return 403 in all cases to avoid dictionary attacks to determine file names
                                    else:
                                        abort(403)
                                else:
                                    #print "Result: " + "\"" + verified_message + "\""
                                    abort(403)
                            else:
                                #return "Request is unauthorized\n"
                                abort(403)
                    else:
                        abort(406)
            else:
                abort(403)
        else:
            abort(404)
